class u{constructor(){this.recordsData=[],this.fieldsInfo=[],this.dateColumns=[],this.columnTypes={},this.debugMode=!1,this.logBuffer=[],this.init()}logger={LEVELS:{ERROR:"error",WARN:"warn",INFO:"info",DEBUG:"debug"},log:(e,t,o=null)=>{const n={timestamp:new Date().toISOString(),level:e,message:t,data:o,url:window.location.href,userAgent:navigator.userAgent.substring(0,100)};this.logBuffer.push(n),this.logBuffer.length>50&&this.logBuffer.shift(),this.sendLogToServer(n),this.saveToLocalStorage(n)},error:(e,t)=>this.logger.log(this.logger.LEVELS.ERROR,e,t),warn:(e,t)=>this.logger.log(this.logger.LEVELS.WARN,e,t),info:(e,t)=>this.logger.log(this.logger.LEVELS.INFO,e,t),debug:(e,t)=>this.logger.log(this.logger.LEVELS.DEBUG,e,t)};sendLogToServer(e){try{fetch("/api/logs",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":document.querySelector('meta[name="csrf-token"]')?.getAttribute("content")},body:JSON.stringify(e)}).catch(t=>{const o=JSON.parse(localStorage.getItem("failed_logs")||"[]");o.push(e),localStorage.setItem("failed_logs",JSON.stringify(o.slice(-10)))})}catch{}}saveToLocalStorage(e){try{const t=JSON.parse(localStorage.getItem("dbf_logs")||"[]");t.push(e);const o=t.slice(-100);localStorage.setItem("dbf_logs",JSON.stringify(o))}catch{localStorage.removeItem("dbf_logs")}}log(e,...t){this.logger.debug(e,t.length>0?t:null)}logImportant(e,...t){this.logger.info(e,t.length>0?t:null)}setDebugMode(e){this.debugMode=e,this.logger.info(`Modo debug ${e?"ACTIVADO":"DESACTIVADO"}`),e&&console.log("🔧 Debug activado manualmente")}init(){document.addEventListener("DOMContentLoaded",()=>{this.setupSearchColumn()})}setData(e,t=[]){if(this.logImportant("Configurando datos del DBF",{recordCount:e.length,fieldCount:t.length}),this.recordsData=e,this.fieldsInfo=t,this.recordsData.length===0){this.logger.warn("No hay registros para analizar");return}this.log("Iniciando análisis completo");try{this.detectColumnTypes(),this.detectDateColumns(),this.showDateColumnsInfo(),this.showColumnTypesInfo(),this.showFinalSummary(),this.logImportant("Análisis completado exitosamente",{totalColumns:Object.keys(this.columnTypes).length,dateColumns:this.dateColumns.length})}catch(o){this.logger.error("Error durante el análisis: "+o.message,{error:o})}}showFinalSummary(){const e={};Object.values(this.columnTypes).forEach(t=>{e[t.type]=(e[t.type]||0)+1}),this.logger.info("Resumen final del archivo DBF",{totalRecords:this.recordsData.length,totalColumns:Object.keys(this.columnTypes).length,dateColumns:this.dateColumns.length,typeDistribution:e})}detectColumnTypes(){if(this.log("🔍 Iniciando detección de tipos de columnas..."),this.columnTypes={},!this.recordsData||this.recordsData.length===0){console.warn("⚠️ No hay datos para analizar tipos");return}const e=Object.keys(this.recordsData[0]),t=Math.min(50,this.recordsData.length);this.log(`📊 Analizando ${e.length} columnas con ${t} muestras...`),e.forEach(o=>{this.log(`🔍 Analizando columna: ${o}`);const n=this.analyzeColumnType(o,t);this.columnTypes[o]=n}),this.log("✅ Detección de tipos completada"),this.log("📋 Tipos de columnas detectados:",this.columnTypes)}analyzeColumnType(e,t){const o=[];for(let d=0;d<t&&o.length<20;d++){const l=this.recordsData[d]&&this.recordsData[d][e];l!=null&&l.toString().trim()!==""&&o.push(l.toString().trim())}if(o.length===0)return{type:"empty",subtype:null,confidence:1,description:"Columna vacía",samples:[]};const n=this.fieldsInfo.find(d=>d.name===e),i={integers:0,floats:0,dates:0,emails:0,phones:0,coordinates:0,codes:0,text:0,boolean:0,empty:0};o.forEach(d=>{this.isInteger(d)?i.integers++:this.isFloat(d)?i.floats++:this.isValidDateFormat(d)?i.dates++:this.isEmail(d)?i.emails++:this.isPhone(d)?i.phones++:this.isCoordinate(d)?i.coordinates++:this.isCode(d)?i.codes++:this.isBoolean(d)?i.boolean++:i.text++});const r=o.length;return{...this.determineMainType(i,r,e,n),samples:o.slice(0,5),totalSamples:r,dbfType:n?n.type:null,dbfLength:n?n.length:null}}determineMainType(e,t,o,n){if(n)switch(n.type){case"D":return{type:"date",subtype:"dbf_date",confidence:1,description:"Fecha (tipo DBF)"};case"N":return e.floats/t>.3?{type:"number",subtype:"float",confidence:.9,description:"Número decimal (tipo DBF)"}:{type:"number",subtype:"integer",confidence:.9,description:"Número entero (tipo DBF)"};case"L":return{type:"boolean",subtype:"logical",confidence:1,description:"Booleano (tipo DBF)"}}if(e.dates/t>=.8)return{type:"date",subtype:"auto_detected",confidence:e.dates/t,description:"Fecha detectada automáticamente"};if(e.integers/t>=.8)return{type:"number",subtype:"integer",confidence:e.integers/t,description:"Número entero"};if(e.floats/t>=.8)return{type:"number",subtype:"float",confidence:e.floats/t,description:"Número decimal"};if(e.emails/t>=.8)return{type:"contact",subtype:"email",confidence:e.emails/t,description:"Correo electrónico"};if(e.phones/t>=.8)return{type:"contact",subtype:"phone",confidence:e.phones/t,description:"Número telefónico"};if(e.coordinates/t>=.8)return{type:"geographic",subtype:"coordinate",confidence:e.coordinates/t,description:"Coordenada geográfica"};if(e.boolean/t>=.8)return{type:"boolean",subtype:"text_boolean",confidence:e.boolean/t,description:"Booleano (Sí/No)"};if(e.codes/t>=.8)return{type:"identifier",subtype:"code",confidence:e.codes/t,description:"Código o identificador"};const r=o.toLowerCase();return r.includes("nis")||r.includes("medidor")?{type:"identifier",subtype:"service_id",confidence:.8,description:"Identificador de servicio"}:r.includes("nom")||r.includes("name")||r.includes("cliente")?{type:"text",subtype:"name",confidence:.7,description:"Nombre o descripción"}:r.includes("dir")||r.includes("address")||r.includes("domicilio")?{type:"text",subtype:"address",confidence:.7,description:"Dirección"}:{type:"text",subtype:"general",confidence:.5,description:"Texto general"}}isInteger(e){const t=parseFloat(e);return!isNaN(t)&&Number.isInteger(t)&&e.toString().indexOf(".")===-1}isFloat(e){const t=parseFloat(e);return!isNaN(t)&&!Number.isInteger(t)&&e.toString().indexOf(".")!==-1}isEmail(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)}isPhone(e){return/^[\+]?[\d\s\-\(\)]{7,15}$/.test(e.replace(/\s/g,""))}isCoordinate(e){const t=/^-?\d{1,3}\.\d+$/,o=parseFloat(e);return t.test(e)&&(o>=-90&&o<=90||o>=-180&&o<=180)}isCode(e){return[/^[A-Z]{2,4}\d{4,}$/,/^\d{6,}$/,/^[A-Z0-9\-]{5,}$/].some(o=>o.test(e))}isBoolean(e){return["true","false","sí","si","no","yes","y","n","1","0","true","false"].includes(e.toLowerCase())}showColumnTypesInfo(){const e={};Object.entries(this.columnTypes).forEach(([t,o])=>{e[o.type]||(e[o.type]=[]),e[o.type].push({column:t,subtype:o.subtype,confidence:o.confidence,description:o.description})}),this.logger.info("Análisis detallado de tipos de columnas completado",{totalColumns:Object.keys(this.columnTypes).length,typesSummary:e})}getTypeIcon(e){return{date:"📅",number:"🔢",text:"📝",identifier:"🆔",contact:"📧",geographic:"🌍",boolean:"✅",empty:"❌"}[e]||"📄"}getColumnType(e){return this.columnTypes[e]||null}getColumnsByType(e,t=null){const o=[];return Object.entries(this.columnTypes).forEach(([n,i])=>{i.type===e&&(!t||i.subtype===t)&&o.push({column:n,...i})}),o}getTypesInfo(){const e={};return Object.values(this.columnTypes).forEach(t=>{e[t.type]||(e[t.type]=0),e[t.type]++}),{totalColumns:Object.keys(this.columnTypes).length,typesSummary:e,detailedTypes:{...this.columnTypes}}}detectDateColumns(){this.log("📅 Detectando columnas de fecha..."),this.dateColumns=[],Object.entries(this.columnTypes).forEach(([e,t])=>{t.type==="date"&&this.dateColumns.push(e)}),this.log("✅ Columnas de fecha detectadas:",this.dateColumns)}isDateColumn(e){if(!this.recordsData||this.recordsData.length===0)return!1;const t=Math.min(10,this.recordsData.length);let o=0,n=0;for(let i=0;i<t;i++){const r=this.recordsData[i][e];r&&r.toString().trim()!==""&&(n++,this.isValidDateFormat(r)&&o++)}return n>0&&o/n>=.6}isValidDateFormat(e){if(!e)return!1;const t=e.toString().trim();if(![/^\d{8}$/,/^\d{4}-\d{2}-\d{2}$/,/^\d{2}\/\d{2}\/\d{4}$/,/^\d{2}-\d{2}-\d{4}$/,/^\d{4}\/\d{2}\/\d{2}$/,/^\d{1,2}\/\d{1,2}\/\d{4}$/].some(i=>i.test(t)))return!1;try{let i;if(/^\d{8}$/.test(t)){const l=parseInt(t.substr(0,4)),f=parseInt(t.substr(4,2)),c=parseInt(t.substr(6,2));i=new Date(l,f-1,c)}else i=new Date(t);const r=i instanceof Date&&!isNaN(i.getTime()),a=i.getFullYear(),d=a>=1900&&a<=2100;return r&&d}catch{return!1}}formatDateValue(e,t){if(!e||!this.dateColumns.includes(t))return e;try{const o=e.toString().trim();let n;if(/^\d{8}$/.test(o)){const i=parseInt(o.substr(0,4)),r=parseInt(o.substr(4,2)),a=parseInt(o.substr(6,2));n=new Date(i,r-1,a)}else n=new Date(o);if(n instanceof Date&&!isNaN(n.getTime())){const i=n.getDate().toString().padStart(2,"0"),r=(n.getMonth()+1).toString().padStart(2,"0"),a=n.getFullYear();return`${i}/${r}/${a}`}}catch{}return e}setupSearchColumn(){const e=document.querySelector('select[name="search_column"]');if(e&&!e.value){const t=e.querySelector('option[value="NIS"]');t&&(t.selected=!0)}}showDetail(e){const t=this.recordsData[e];if(!t){this.logger.error("Registro no encontrado en índice: "+e);return}const o=["NIS","NROMEDIDOR","MARCAMED","RETHORING","RETHOR"],n=["DIAMETRO","CLASE","RETFEC","FECHAPROG","FECHAING","TEL_CLIE","HORAPROG","CUS"],i=this.generateFieldsHtml(t,o),r=this.generateFieldsHtml(t,n),a=this.generateCompleteTable(t);this.updateModalContent(i,r,a,t.NIS),this.openModal(),this.logger.info("Detalle de registro visualizado",{index:e,nis:t.NIS})}generateFieldsHtml(e,t){let o='<dl class="row">';return Object.keys(e).forEach(n=>{if(t.includes(n)){const i=e[n]||"",r=this.formatDateValue(i,n),a=this.escapeHtml(r);o+=`
                    <dt class="col-sm-5">${this.escapeHtml(n)}:</dt>
                    <dd class="col-sm-7">${a||'<span class="text-muted">N/A</span>'}</dd>
                `}}),o+="</dl>",o}generateCompleteTable(e){let t="<tbody>";return Object.keys(e).forEach(o=>{const n=e[o]||"",i=this.formatDateValue(n,o),r=this.escapeHtml(i);t+=`
                <tr>
                    <td class="fw-bold bg-light" style="width: 30%;">${this.escapeHtml(o)}</td>
                    <td>${r||'<span class="text-muted">N/A</span>'}</td>
                </tr>
            `}),t+="</tbody>",t}updateModalContent(e,t,o,n){const i=document.getElementById("clientInfo"),r=document.getElementById("technicalInfo"),a=document.getElementById("allDataTable"),d=document.getElementById("recordDetailModalLabel");if(i&&(i.innerHTML=e),r&&(r.innerHTML=t),a&&(a.innerHTML=o),d){const l=this.escapeHtml(n||"Sin NIS");d.innerHTML=`<i class="fas fa-info-circle"></i> Detalle del Registro - NIS: ${l}`}}openModal(){const e=document.getElementById("recordDetailModal");if(e&&typeof bootstrap<"u"){const t=new bootstrap.Modal(e);e.addEventListener("shown.bs.modal",function(){e.removeAttribute("aria-hidden");const o=e.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');o&&o.focus()}),e.addEventListener("hidden.bs.modal",function(){e.setAttribute("aria-hidden","true")}),t.show()}else this.logger.error("Modal no encontrado o Bootstrap no disponible")}showDateColumnsInfo(){if(this.dateColumns.length===0){this.log("No se detectaron columnas de fecha en este archivo DBF");return}this.logImportant(`Se detectaron ${this.dateColumns.length} columnas de fecha:`,this.dateColumns);const e=document.querySelector(".card-header .row");if(e&&!document.querySelector(".date-columns-info")){const t=document.createElement("div");t.className="date-columns-info mt-2",t.innerHTML=`
                <small class="text-light">
                    <strong>Columnas de fecha detectadas:</strong> ${this.dateColumns.join(", ")}
                    <span class="badge bg-warning text-dark ms-2">${this.dateColumns.length}</span>
                </small>
            `,e.appendChild(t)}}escapeHtml(e){const t=document.createElement("div");return t.textContent=String(e),t.innerHTML}}window.dbfViewer=new u;function g(){const s=document.getElementById("app-data");if(s)try{const e=s.getAttribute("data-rows"),t=s.getAttribute("data-fields");if(!e)return window.dbfViewer&&window.dbfViewer.logger.warn("No hay datos para cargar automáticamente"),!1;const o=JSON.parse(atob(e)),n=t?JSON.parse(atob(t)):[];return window.dbfViewer?(window.dbfViewer.logger.info("Carga automática de datos",{registros:o.length,campos:n.length}),window.dbfViewer.setData(o,n),window.dbfViewer.logger.info("Datos cargados automáticamente exitosamente"),!0):(window.dbfViewer&&window.dbfViewer.logger.error("dbfViewer no está disponible"),!1)}catch(e){return window.dbfViewer&&window.dbfViewer.logger.error("Error al cargar datos automáticamente",{error:e.message}),!1}else return window.dbfViewer&&window.dbfViewer.logger.warn("Elemento app-data no encontrado para carga automática"),!1}document.addEventListener("DOMContentLoaded",function(){if(!g()){let s=0;const e=10,t=setInterval(()=>{s++,(g()||s>=e)&&(clearInterval(t),s>=e&&window.dbfViewer&&window.dbfViewer.logger.warn("No se pudieron cargar los datos automáticamente después de múltiples intentos",{intentos:s}))},500)}document.addEventListener("click",function(s){if(s.target.closest('[data-action="show-detail"]')){const e=s.target.closest('[data-action="show-detail"]'),t=parseInt(e.getAttribute("data-index"));window.dbfViewer&&!isNaN(t)&&window.dbfViewer.showDetail(t)}})});window.diagnosticar=function(){const s=document.getElementById("app-data"),e={dbfViewerExists:!!window.dbfViewer,recordsCount:window.dbfViewer?.recordsData?.length||0,fieldsCount:window.dbfViewer?.fieldsInfo?.length||0,appDataExists:!!s,hasRows:!!s?.getAttribute("data-rows"),hasFields:!!s?.getAttribute("data-fields")};if(window.dbfViewer&&window.dbfViewer.logger.info("Diagnóstico del sistema ejecutado",e),window.dbfViewer&&window.dbfViewer.debugMode){if(console.log("🔍 === DIAGNÓSTICO DEL SISTEMA ==="),console.log("1. ¿Existe dbfViewer?",!!window.dbfViewer),console.log("2. ¿Tiene datos?",window.dbfViewer?.recordsData?.length||0),console.log("3. ¿Tiene campos?",window.dbfViewer?.fieldsInfo?.length||0),console.log("4. ¿Existe app-data?",!!s),s){const t=!!s.getAttribute("data-rows"),o=!!s.getAttribute("data-fields");if(console.log("5. ¿Tiene data-rows?",t),console.log("6. ¿Tiene data-fields?",o),t)try{const n=JSON.parse(atob(s.getAttribute("data-rows")));console.log("7. Registros decodificados:",n.length),console.log("8. Columnas encontradas:",Object.keys(n[0]||{}))}catch(n){console.error("Error decodificando rows:",n)}}console.log("=== FIN DIAGNÓSTICO ===")}return e};window.analizarAhora=function(){const s=document.getElementById("app-data");if(!s)return window.dbfViewer&&window.dbfViewer.logger.error("No se encuentra elemento app-data"),null;try{const e=s.getAttribute("data-rows"),t=s.getAttribute("data-fields");if(!e)return window.dbfViewer&&window.dbfViewer.logger.error("No hay datos disponibles para análisis"),null;const o=JSON.parse(atob(e)),n=t?JSON.parse(atob(t)):[];window.dbfViewer&&window.dbfViewer.debugMode&&(console.log("🚀 === ANÁLISIS FORZADO ==="),console.log(`📊 Analizando ${o.length} registros con ${Object.keys(o[0]).length} columnas`));const i={},r=Object.keys(o[0]);if(r.forEach(a=>{const d=o.slice(0,10).map(l=>l[a]).filter(l=>l&&l.toString().trim());d.length===0?i[a]="empty":d.every(l=>/^\d+$/.test(l.toString()))?i[a]="integer":d.every(l=>/^\d+\.\d+$/.test(l.toString()))?i[a]="decimal":d.some(l=>/\d{8}|\d{2}\/\d{2}\/\d{4}|\d{4}-\d{2}-\d{2}/.test(l.toString()))?i[a]="date":a.toLowerCase().includes("nis")||a.toLowerCase().includes("medidor")?i[a]="identifier":a.toLowerCase().includes("nom")||a.toLowerCase().includes("dir")?i[a]="text":i[a]="unknown"}),window.dbfViewer&&window.dbfViewer.logger.info("Análisis forzado completado",{recordsAnalyzed:o.length,columnsAnalyzed:r.length,typesDetected:i}),window.dbfViewer&&window.dbfViewer.debugMode){console.log("📋 === TIPOS DETECTADOS ===");const a={};Object.entries(i).forEach(([d,l])=>{a[l]||(a[l]=[]),a[l].push(d)}),Object.entries(a).forEach(([d,l])=>{console.log(`${{date:"📅",integer:"🔢",decimal:"💰",identifier:"🆔",text:"📝",empty:"❌",unknown:"❓"}[d]||"📄"} ${d.toUpperCase()}: ${l.length} columnas`),l.forEach(c=>console.log(`   • ${c}`))}),console.log("=== FIN ANÁLISIS ===")}return i}catch(e){return window.dbfViewer&&window.dbfViewer.logger.error("Error en análisis forzado",{error:e.message}),null}};window.activarDebug=function(){window.dbfViewer&&(window.dbfViewer.setDebugMode(!0),console.log("🔧 Debug activado - logs visibles en consola"),console.log("💡 Usa: desactivarDebug() para desactivar"),console.log("📁 Logs automáticos guardados en: storage/logs/laravel.log"))};window.desactivarDebug=function(){window.dbfViewer&&(window.dbfViewer.setDebugMode(!1),console.log("🔇 Debug desactivado - logs solo en archivo"))};window.verAnalisisCompleto=function(){if(window.dbfViewer&&window.dbfViewer.columnTypes){const s={};return Object.entries(window.dbfViewer.columnTypes).forEach(([e,t])=>{s[t.type]||(s[t.type]=[]),s[t.type].push({column:e,subtype:t.subtype,confidence:Math.round(t.confidence*100)+"%",description:t.description})}),window.dbfViewer.logger.info("Análisis completo solicitado",{totalColumnas:Object.keys(window.dbfViewer.columnTypes).length,fechasDetectadas:window.dbfViewer.dateColumns.length,resumenTipos:s}),window.dbfViewer.debugMode&&(console.log("=== 📊 ANÁLISIS COMPLETO DE COLUMNAS ==="),console.log(`📋 Total: ${Object.keys(window.dbfViewer.columnTypes).length} columnas`),console.log(`📅 Fechas: ${window.dbfViewer.dateColumns.length} detectadas`),console.log(""),Object.entries(s).forEach(([e,t])=>{const o=window.dbfViewer.getTypeIcon(e);console.log(`${o} ${e.toUpperCase()}: ${t.length} columnas`),t.forEach(n=>{console.log(`   • ${n.column}: ${n.description} (${n.confidence})`)}),console.log("")}),console.log("=========================================")),s}};window.verLogs=function(){window.dbfViewer&&(window.dbfViewer.debugMode?console.table(window.dbfViewer.logBuffer):window.dbfViewer.logger.info("Logs consultados",{bufferSize:window.dbfViewer.logBuffer.length,mensaje:"Activa debug para ver en consola: activarDebug()"}))};window.exportarLogs=function(){const s=JSON.parse(localStorage.getItem("dbf_logs")||"[]"),e=JSON.stringify(s,null,2),t=new Blob([e],{type:"application/json"}),o=document.createElement("a");return o.href=URL.createObjectURL(t),o.download=`dbf_logs_${new Date().toISOString().split("T")[0]}.json`,document.body.appendChild(o),o.click(),document.body.removeChild(o),window.dbfViewer&&window.dbfViewer.logger&&window.dbfViewer.logger.info("Logs exportados",{archivo:`dbf_logs_${new Date().toISOString().split("T")[0]}.json`,registros:s.length}),window.dbfViewer&&window.dbfViewer.debugMode&&console.log("📁 Logs exportados como archivo JSON"),s.length};window.limpiarLogs=function(){localStorage.removeItem("dbf_logs"),localStorage.removeItem("failed_logs"),window.dbfViewer&&(window.dbfViewer.logBuffer=[],window.dbfViewer.logger.info("Logs limpiados por usuario")),window.dbfViewer&&window.dbfViewer.debugMode&&console.log("🧹 Logs limpiados")};window.estadoLogs=function(){const s=JSON.parse(localStorage.getItem("dbf_logs")||"[]"),e=JSON.parse(localStorage.getItem("failed_logs")||"[]"),t=window.dbfViewer?window.dbfViewer.logBuffer.length:0,o={localStorage:s.length,failed:e.length,memory:t,debugMode:window.dbfViewer?.debugMode||!1};return window.dbfViewer&&window.dbfViewer.logger.info("Estado de logs consultado",o),window.dbfViewer&&window.dbfViewer.debugMode&&(console.log("📊 === ESTADO DEL SISTEMA DE LOGS ==="),console.log(`💾 Logs en localStorage: ${s.length}`),console.log(`❌ Logs fallidos: ${e.length}`),console.log(`🧠 Logs en memoria: ${t}`),console.log(`🔧 Debug activo: ${window.dbfViewer?.debugMode?"SÍ":"NO"}`),console.log("📁 Archivo: storage/logs/laravel.log"),console.log("=====================================")),o};window.dbfViewer&&window.dbfViewer.logger.info("Sistema de control y logging inicializado",{functions:["activarDebug()","verAnalisisCompleto()","verLogs()","exportarLogs()","estadoLogs()"],logFile:"storage/logs/laravel.log"});setTimeout(()=>{window.dbfViewer&&(window.dbfViewer.logger.info("Verificación final del sistema iniciada"),window.dbfViewer.recordsData.length===0?(window.dbfViewer.logger.warn("No hay datos cargados, intentando forzar carga"),g()?window.dbfViewer.logger.info("Datos cargados exitosamente en verificación final"):window.dbfViewer.logger.error("No se pudieron cargar datos en verificación final")):window.dbfViewer.recordsData.length>0?(window.dbfViewer.logger.info("Sistema funcionando correctamente",{registrosCargados:window.dbfViewer.recordsData.length}),Object.keys(window.dbfViewer.columnTypes).length===0&&(window.dbfViewer.logger.info("Ejecutando análisis faltante"),window.dbfViewer.detectColumnTypes(),window.dbfViewer.detectDateColumns(),window.dbfViewer.showDateColumnsInfo(),window.dbfViewer.showColumnTypesInfo(),window.dbfViewer.showFinalSummary())):window.dbfViewer.logger.error("dbfViewer no está disponible en verificación final"))},2e3);
